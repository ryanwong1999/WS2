#机器人定位
amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2       #来自旋转的里程计旋转估计的预期过程噪声
    alpha2: 0.2       #来自平移的里程计旋转估计的预期过程噪声
    alpha3: 0.2       #来自平移的里程计平移估计的预期过程噪声
    alpha4: 0.2       #来自旋转的里程计平移估计的预期过程噪声
    alpha5: 0.2       #仅适用于Omni模型：翻译噪声
    base_frame_id: "base_footprint"   #机器人基准坐标系
    beam_skip_distance: 0.5           #在似然场模型中忽略大多数粒子不同意的射线。要考虑跳过的最大距离（米）
    beam_skip_error_threshold: 0.9    #未能将地图匹配到强制完全更新由于收敛性不佳的射线的百分比
    beam_skip_threshold: 0.3          #需要跳过的射线的百分比
    do_beamskip: false                #是否在似然场模型中进行射线跳过
    global_frame_id: "map"            #由定位系统发布的坐标框架的名称
    lambda_short: 0.1                 #模型中 z_short 部分的指数衰减参数
    laser_likelihood_max_dist: 2.0    #地图上进行障碍物膨胀的最大距离，用于 likelihood_field 模型
    laser_max_range: 100.0            #要考虑的最大扫描范围，-1.0将导致使用激光报告的最大范围
    laser_min_range: -1.0             #要考虑的最小扫描范围，-1.0 表示使用激光报告的最小范围
    laser_model_type: "likelihood_field"  #要使用的模型，可以是beam、likelihood_field或likelihood_field_prob。与likelihood_field相同，但如果启用，则包含beamskip功能
    max_beams: 60               #更新滤波器时每个扫描中要使用的均匀间隔的激光束数量
    max_particles: 2000         #粒子的最大允许数量
    min_particles: 500          #粒子数的最小允许值
    odom_frame_id: "odom"       #用于里程计的帧
    pf_err: 0.05                #粒子滤波器种群错误
    pf_z: 0.99                  #粒子滤波器种群密度
    recovery_alpha_fast: 0.0    #快速平均权重滤波器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。一个好的值可能是 0.1
    recovery_alpha_slow: 0.0    #慢速平均权重滤波器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。一个好的值可能是 0.001
    resample_interval: 1        #重新取样前所需的滤波器更新次数
    robot_model_type: "differential"    #有效选项为“differential”、“omnidirectional”
    save_pose_rate: 0.5         #以每秒存储上次估计的姿态和协方差到参数服务器的最大速率（变量为~initial_pose_*和~initial_cov_*）。此保存的姿态将在后续运行中用于初始化滤波器（-1.0为禁用）
    sigma_hit: 0.2              #用于模型中z_hit部分的高斯模型的标准偏差
    tf_broadcast: true          #将其设置为false可防止amcl发布全局坐标系和里程计坐标系之间的变换
    transform_tolerance: 1.0    #发布变换时用于后期日期的时间，以表明该变换在未来是有效的
    update_min_a: 0.2           #在执行滤波器更新之前需要的旋转运动
    update_min_d: 0.25          #在执行滤波器更新之前需要的平移运动
    z_hit: 0.5              #模型中z_hit部分的混合权重，所有使用的z权重之和必须为1。Beam使用全部4个，似然模型使用z_hit和z_rand
    z_max: 0.05             #模型中z_max部分的混合权重，所有使用的z权重之和必须为1。Beam使用全部4个权重，似然模型使用z_hit和z_rand
    z_rand: 0.5             #模型中z_rand部分的混合权重，所有使用的z权重之和必须为1。Beam使用全部4个权重，似然模型使用z_hit和z_rand
    z_short: 0.05           #z_short部分的混合权重，所有使用的z权重之和必须为1。Beam使用全部4个，似然模型使用z_hit和z_rand
    scan_topic: scan        #要订阅的激光扫描话题
    map_topic: map          #要订阅的地图话题
    first_map_only: false   #允许AMCL在map_topic上接受多个地图。这在使用`map_server`中的`LoadMap`服务时特别有用。在Humble之前，该参数为`first_map_only_`

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

#导航行为树
bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

#控制器服务器
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0        #控制器运行的频率（Hz）
    min_x_velocity_threshold: 0.001       #控制器服务器在将接收到的里程计消息发送给控制器插件之前会过滤速度部分。低于此阈值（以 m/s 为单位）的里程计值将被设置为 0.0
    min_y_velocity_threshold: 0.5         #控制器服务器在将接收到的里程计消息发送给控制器插件之前会过滤速度部分。低于此阈值（以 m/s 为单位）的里程计值将被设置为 0.0。对于非全向移动机器人
    min_theta_velocity_threshold: 0.001   #控制器服务器在将接收到的里程计消息发送给控制器插件之前会过滤速度部分。低于此阈值（以 rad/s 为单位）的里程计值将被设置为 0.0
    progress_checker_plugin: "progress_checker"   #检查机器人进度的进度检查插件的映射名称。以前用于Humble和旧版本的``progress_checker_plugin``，使用单个字符串插件
    goal_checker_plugin: "goal_checker"   #检查目标是否已达到的目标检查插件的映射名称
    controller_plugins: ["FollowPath"]    #用于处理请求和参数的控制器插件的映射名称列表

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.26
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

#局部代价地图
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.22
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

#全局代价地图
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "turtlebot3_world.yaml"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: False

#规划服务器
planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

#恢复服务器
recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "back_up", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    back_up:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True
